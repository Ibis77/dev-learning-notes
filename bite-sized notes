// Entry 1
// flex: 1; often used in nav bar
justify-content: center; == flex: 1;

// Entry 2
// sass command lines in terminal - creates a map file to compile from a scss file to a css file
// sass command to do the above automatically
sass scss/style.scss:css/style.css
sass --watch scss:css

// Entry 3
// swiper - responsive to screen re-sizing - can be assisted with the "breakpoints" feature, e.g.
  <!-- Swiper JS -->
    <script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"></script>
<!-- Initialize Swiper -->
    <script>
      var swiper = new Swiper(".mySwiper", {
        slidesPerView: 1,
        spaceBetween: 10,
        pagination: {
          el: ".swiper-pagination",
          clickable: true,
        },
        breakpoints: {
          600: {
            slidesPerView: 2,
            spaceBetween: 20,
          },
          961: {
            slidesPerView: 3,
            spaceBetween: 50,
          },
        },
      });
    </script>

// Entry 4
// multi-definition
// SCSS
$primary-color: #555;
$primary-border: 1px solid $primary-color;

h2.page-header {
  border: $primary-border;
}
// CSS
h2.page-header {
  border: 1px solid #555;
}

// Entry 5
// nesting
// SCSS
.nav {
  height: 100px;

  ul {
    margin: 0;

    li {
      padding: 5px;
    }

    a {
      display: block;
      color: #000;

      &:hover {
        background-color: blue;
        color: #000;
      }
    }
  }
}
// CSS
.nav {
  height: 100px;
}
.nav ul {
  margin: 0;
}
.nav ul li {
  padding: 5px;
}
.nav ul a {
  display: block;
  color: #000;
}
.nav ul a:hover {
  background-color: blue;
  color: #000;
}

// Entry 6
// @mixin and @include
// SCSS
@mixin alert {
  color: #000;

  a {
    color: pink;
  }
}

.alert-warning {
  @include alert;
}
//  CSS
.alert-warning {
  color: #000;
}
.alert-warning a {
  color: pink;
}

// Entry 7
// CRUD = Create, read, update and delete

// Entry 8
// function declaration has hoisting, i.e. can be called before function
// example below works
getArrMax();
function getArrMax(){
  console.log('hello')
};
// function expression has not hoisting, i.e. can only be called after function
// example below faults
getArrMax();
const getArrMax = function(){
  console.log('hello')
};

// Entry 9
// find the largest value
Math.max()
// could be use in conjunction with map
const arr = [{},{},{}];
Math.max(...arr.map((item)=>item.y));

// Entry 10 - 3 ways to shallow clone
// 1. Object.assign
let Obj = {};
Objet.assign(newObj, obj);
console.log(newObj);
// 2. Array.from
let arr = [];
const newArr = Array.from(arr);
// 3. ...
let arr = [];
const newArr = [...arr];

// Entry 11 deep clone
// JSON.parse(JSON.stringify(object))
const obj = {};
const newObj = JSON.parse(JSON.stringify(obj));
// undefined might cause issues
// also see lodash cloneDeep() for same function, i.e. deep clone
// structuredClone() - native to browser
const obj = {};
const newObj = structuredClone(obj);

// Entry 12 grid column
// divides the screen into 12 columns with 1 fractional unit each
.grid-container {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
}
// make the grid-item start from column #3, and span 4 columns, so 3, 4, 5, 6
.grid-item {
  grid-column-start: 3;
  grid-column-end: span 4;
}

//  Entry 13 object literal property value shorthand
const addAgeAttributeToPerson = (age, person) => ({
  firstName: person.firstName,
  lastName: person.lastName,
  age: age
})
//  can be abbreviated to the following:
const addAgeAttributeToPerson = (age, person) => ({
  firstName: person.firstName,
  lastName: person.lastName,
  age
})
//  can be further abbreviated to the following:
const addAgeAttributeToPerson = (age, {firstName, lastName}) => ({
  firstName: firstName,
  lastName: lastName,
  age
})
//  can be further abbreviated to the following:
const addAgeAttributeToPerson = (age, {firstName, lastName}) => ({
  firstName,
  lastName,
  age
})
//  or simply:
const addAgeAttributeToPerson = (age, {firstName, lastName}) => ({  firstName, lastName, age  })
//  or just:
const addAgeAttributeToPerson = (age, person) => ({  ...person, age  })
