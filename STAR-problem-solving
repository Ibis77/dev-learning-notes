//Applying the STAR principle to problem solving in dev learning.

#
SITUATION:
TASK:
ACTION:
RESULT:

#1         Past commit git pull issue
SITUATION: As a rookie dev, I went to a past commit and git checkout with it (because I like that version of code better).
           I made changes to the code to my satisfaction, and wanted to apply them to the current code. Couldn't git pull as not on right branch.
           Also had multiple merge conflicts.
TASK:      Get back on the right branch, git pull and git push to apply the updated code.
ACTION:    Git stash changes and git checkout main branch. Unstage and discard all changes (I had more than 700, no idea where they came from). Use git log to reset to              previous good version if any changes have already been applied. Merge conflicts should now be gone. Git stash apply. Stage and commit the desired changes.
           Git pull and git push as normal.
RESULT:    Git pull and git push successful, changes to code applied.

#2         Vertical space gap not going away
SITUATION: H3 and p in class="testimonial" too far away from each other vertically. Already margin=0; padding=0; border=0;, problem persisted.
TASK:      Reduce space gap between H3 and p in class="testimonial".
ACTION:    Open html file in browser, right-click to Inspect. In Elements, select area with issue and check CSS. Notice user agent (i.e. default) stylesheet.
           Use specific keys for modifications, in this case margin-block-start: 0; margin-block-end: 0;
RESULT:   Vertical space gap gone.

#3         let in JavaScript function
SITUATION: indexOf function applied after toLowerCase, but not working properly.
           function indexOfIgnoreCase(a,b) {
             a.toLowerCase();
             b.toLowerCase();
             return a.indexOf(b);
           }
TASK:      Find out why the code is not working properly and fix it.
ACTION:    use let
RESULT:    function indexOfIgnoreCase(a,b) {
             let aL = a.toLowerCase();
             let bL = b.toLowerCase();
             return aL.indexOf(bL);
           }
           The code works now. When a='bit', b='IT', it returns 1.

#4
SITUATION: Webpage not responsive to screen size changes.
TASK:      Adjust CSS to make the webpage responsive to screen size changes.
ACTION:    Replace "width: 1000px;" with "max-width: 1000px; width: 100%;"
RESULT:    Webpage now responsive to screen size changes.

#5
SITUATION: Team collab project. Code working fine individually, but layout different when combined.
TASK:      Make code compatible with other devs' code and make sure layout stays the same.
ACTION:    Insert/add component name before class name, e.g. from "container" to "testimonial__container-text"
RESULT:    Layout stays the same now, no code contamination.

#6
SITUATION: Need to display all 3 slides on a larger screen, and only 1 slide on a smaller screen.
TASK:      Find the right script/script configuration.
ACTION:    Use "breakpoints" feature, with 600 and 961 as two breakpoints, and adjust "slidesPerView" and "spaceBetween" properties. See "./bite-sized notes".
RESULT:    Responsive display achieved.

#7
SITUATION: Need to import openweathermapServiceAPI from openweathermapServiceAPI.js; SyntaxError: Cannot use import statement outside a module
TASK:      Fix this error and use openweathermapServiceAPI
ACTION:    const openweathermapServiceAPI = require("../services/openweathermapServiceAPI");
RESULT:    Can use openweathermapServiceAPI now
