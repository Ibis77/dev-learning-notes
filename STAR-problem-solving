//Applying the STAR principle to problem solving in dev learning.

#
SITUATION:
TASK:
ACTION:
RESULT:

#1         Past commit git pull issue
SITUATION: As a rookie dev, I went to a past commit and git checkout with it (because I like that version of code better).
           I made changes to the code to my satisfaction, and wanted to apply them to the current code. Couldn't git pull as not on right branch.
           Also had multiple merge conflicts.
TASK:      Get back on the right branch, git pull and git push to apply the updated code.
ACTION:    Git stash changes and git checkout main branch. Unstage and discard all changes (I had more than 700, no idea where they came from). Use git log to reset to              previous good version if any changes have already been applied. Merge conflicts should now be gone. Git stash apply. Stage and commit the desired changes.
           Git pull and git push as normal.
RESULT:    Git pull and git push successful, changes to code applied.

#2         Vertical space gap not going away
SITUATION: H3 and p in class="testimonial" too far away from each other vertically. Already margin=0; padding=0; border=0;, problem persisted.
TASK:      Reduce space gap between H3 and p in class="testimonial".
ACTION:    Open html file in browser, right-click to Inspect. In Elements, select area with issue and check CSS. Notice user agent (i.e. default) stylesheet.
           Use specific keys for modifications, in this case margin-block-start: 0; margin-block-end: 0;
RESULT:   Vertical space gap gone.

#3         let in JavaScript function
SITUATION: indexOf function applied after toLowerCase, but not working properly.
           function indexOfIgnoreCase(a,b) {
             a.toLowerCase();
             b.toLowerCase();
             return a.indexOf(b);
           }
TASK:      Find out why the code is not working properly and fix it.
ACTION:    use let
RESULT:    function indexOfIgnoreCase(a,b) {
             let aL = a.toLowerCase();
             let bL = b.toLowerCase();
             return aL.indexOf(bL);
           }
           The code works now. When a='bit', b='IT', it returns 1.

#4
SITUATION: Webpage not responsive to screen size changes.
TASK:      Adjust CSS to make the webpage responsive to screen size changes.
ACTION:    Replace "width: 1000px;" with "max-width: 1000px; width: 100%;"
RESULT:    Webpage now responsive to screen size changes.

#5
SITUATION: Team collab project. Code working fine individually, but layout different when combined.
TASK:      Make code compatible with other devs' code and make sure layout stays the same.
ACTION:    Insert/add component name before class name, e.g. from "container" to "testimonial__container-text"
RESULT:    Layout stays the same now, no code contamination.

#6
SITUATION: Need to display all 3 slides on a larger screen, and only 1 slide on a smaller screen.
TASK:      Find the right script/script configuration.
ACTION:    Use "breakpoints" feature, with 600 and 961 as two breakpoints, and adjust "slidesPerView" and "spaceBetween" properties. See "./bite-sized notes".
RESULT:    Responsive display achieved.

#7
SITUATION: Need to import openweathermapServiceAPI from openweathermapServiceAPI.js; SyntaxError: Cannot use import statement outside a module
TASK:      Fix this error and use openweathermapServiceAPI
ACTION:    const openweathermapServiceAPI = require("../services/openweathermapServiceAPI");
RESULT:    Can use openweathermapServiceAPI now

#8
SITUATION: Need to cut text if too long in width
TASK:      How to adjust in CSS?
ACTION:    Google "CSS cut text if too long"
RESULT:    Still working on this

#9
SITUATION: Need to add scroll bar on webpage
TASK:      Learn how to deploy a scroll bar using CSS
ACTION:    Google "CSS custom scroll bar" and found entry on w3school
RESULT:    Copy and paste code, viola

#10
SITUATION: CSS style not appropriately applied to one of the <div>
TASK:      inspect on live server, check HTML code; identify missing className or misplaced </div>
ACTION:    adding missing className and correctly placing </div>
RESULT:    CSS style correctly applied now

#11
SITUATION: Member of a team project using React to build an AI-enabled auto-marking tool, initially using vanilla HTML as requested
TASK:      To re-build the Landing Page that contains buttons linking to "Sign up" and "Log in" pages in the React framework
ACTION:    Re-built Landing Page with folder complete with .jsx, .css files with rendering features leading to respective pages
RESULT:    Re-created Landing Page with React features successfully linking to other pages in the project

#12
SITUATION: Development period, supposed to be able to navigate between pages by manually adding a word at the end of the address, but could not do so. Was using vanilla HTML for an index.html page under /public
TASK:      Solve this issue of not being able to navigate between pages with manual typing.
ACTION:    Deleted everything in index.html and restored it to its default content.
RESULT:    Things are working now, able to navigate between pages with manual typing.

#13
SITUATION: Imported component export const defaultFrontEndPrefix = "localhost:3001"; from /constants/index, when used in <SignUpTag href={`http://${defaultFrontEndPrefix}/signup`}>Sign up</SignUpTag>, prompted to be "unreachable code".
TASK:      To identify the factor causing the "unreachable code" issue
ACTION:    Noticed the "hello world"; one line above the <SignUpTag>, and removed it.
RESULT:    The default frontend prefix component is working properly.

#14
SITUATION: Calling OpenAI to generate response with OpenAI_URL and OpenAI_API_KEY, and want to keep private OpenAI_API_KEY confidential
TASK:      To use OpenAI_API_KEY in the project without exposing it publicly on GitHub repo
ACTION:    Created .env file to be .gitignore and store OpenAI_API_KEY in .env; use const to call its value in other documents
RESULT:    Successfully used OpenAI_URL and OpenAI_API_KEY without exposing them publicly

